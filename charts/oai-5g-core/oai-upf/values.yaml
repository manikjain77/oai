kubernetesType: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:
  repository: docker.io/oaisoftwarealliance/oai-upf # dockerhub oaisoftwarealliance/oai-upf
  version: v2.0.0           #image tag, develop tag for experimental features
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub
imagePullSecrets:
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-upf"

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)
exposedPorts:
  sbi: 80
  n4: 8805 # default port no need to change unless necessary
  n3: 2152 # default port no need to change unless necessary

# create an extra interface for N3 incase the gNB is outside the cluster network or there is a need to have dedicated interface for N3
## Change these ip-addresses according to your environment
## N4, N6 are optional only if you want that UPF uses different subnets for different 3gpp interfaces. 

  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: "@CN_DEFAULT_GW@"
    n3Interface:
      create: @MULTUS_UPF_N3@
      Ipadd: "@IP_UPF_N3@"
      Netmask: "@NETMASK_UPF_N3@"
      ## If you do not need a specific mac address leave the field empty
      Mac: "@MAC_UPF_N3@"
      # #name inside the pod is hardcoded right now
      # name: "n3"
      ## If you do not have a gateway leave the field empty
      Gateway: "@GW_UPF_N3@"
      ## If you don't want to add a default route in your pod then replace this field with ""
      routes: @ROUTES_UPF_N3@
      hostInterface: "@IF_NAME_UPF_N3@"
    ## For n4 it is better to re-use eth0 interface inside the pod (primary CNI of Kubernetes)
    n4Interface:
      create: @MULTUS_UPF_N4@
      Ipadd: "@IP_UPF_N4@"
      Netmask: "@NETMASK_UPF_N4@"
      ## If you do not need a specific mac address leave the field empty
      Mac: "@MAC_UPF_N4@"
      # #name inside the pod is hardcoded right now
      # name: "n4"
      ## If you do not have a gateway leave the field empty
      Gateway: "@GW_UPF_N4@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_UPF_N4@
      hostInterface: "@IF_NAME_UPF_N4@"
    n6Interface:
      create: @MULTUS_UPF_N6@
      Ipadd: "@IP_UPF_N6@"
      # #name inside the pod is hardcoded right now
      # name: "n6"
      Netmask: "@NETMASK_UPF_N6@"
      ## If you do not need a specific mac address leave the field empty
      Mac: "@MAC_UPF_N6@"
      ## If you do not have a gateway leave the field empty
      Gateway: "@GW_UPF_N6@"
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: @ROUTES_UPF_N6@
      hostInterface: "@IF_NAME_UPF_N6@"

## Debugging section
start:
  spgwu: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: @START_TCPDUMP@

includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #If true it will add a tcpdump container inside network function pod for debugging

## For openshift you can use rhel8/support-tools:8.7-13
tcpdumpimage:
  repository: docker.io/corfr/tcpdump
  version: latest
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

securityContext:
  privileged: @PRIVILEGED@

#To store PCAP of NF in a sharedVolume so it can be easily fetched (PVC is created with NRF charts so make sure in NRF it is true)
persistent:
  sharedvolume: @SHAREDVOLUME@

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos
resources:
  define: false
  limits:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi
  requests:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi

readinessProbe: true

livenessProbe: false

terminationGracePeriodSeconds: 5

nodeSelector: {}

nodeName: @NODE_UPF@
